shell:
  build: .
  user: appuser
  dockerfile: dockerfiles/Dockerfile
  volumes:
    - .:/app
  command: bash

server-dev:
  build: .
  user: appuser
  dockerfile: dockerfiles/Dockerfile
  volumes:
    - .:/app
  ports:
    - 5000:5000
  environment:
    - FLASK_APP=app
    - FLASK_ENV=development

lint:
  build: .
  user: appuser
  dockerfile: dockerfiles/Dockerfile_tests
  volumes:
    - .:/app
  command: bash -c "black /app/app --check && pycodestyle /app/app --config=pycodestyle.cfg"

lint-fix:
  build: .
  user: appuser
  dockerfile: dockerfiles/Dockerfile_tests
  volumes:
    - .:/app
  command: bash -c "black /app/app"

pip-compile:
  build: .
  dockerfile: dockerfiles/Dockerfile_pip_compile
  entrypoint: []
  user: appuser
  volumes:
    - .:/app
  command: >
    bash --login -c "
      pip-compile --output-file requirements.txt requirements.in &&
      pip-compile --output-file requirements_test.txt requirements_test.in"
# -----------------------------------------------------------------------------
# 'pip-compile-upgrade-requirements' service is used to upgrade packages
# located in requirements*.in.
#
# Usage:
#   UPGRADE_PACKAGE=<package_name> docker-compose run --rm pip-compile-upgrade-requirements
# -----------------------------------------------------------------------------
pip-compile-upgrade-requirements:
  extends:
    service: pip-compile
  command: >
    bash --login -c "
      pip-compile --upgrade-package $UPGRADE_PACKAGE --output-file requirements.txt requirements.in &&
      pip-compile --upgrade-package $UPGRADE_PACKAGE --output-file requirements_test.txt requirements_test.in"
